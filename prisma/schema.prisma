// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

enum Role {
    ADMIN
    USER
}

model News {
    id          String  @id @default(cuid())
    title       String  @unique
    description String
    category    String
    slug        String  @unique
      images      String @default("https://images.unsplash.com/photo-1462804993656-fac4ff489837?crop=entropy&cs=srgb&fm=jpg&ixid=Mnw0Mjc3MDB8MHwxfHNlYXJjaHwyfHxwcmV0dHklMjB3b21hbnxlbnwwfDB8fHwxNjc5OTA0NTcx&ixlib=rb-4.0.3&q=85")

    html String? @db.Text
    text String? @db.Text

    author    User     @relation(fields: [authorId], references: [id])
    authorId  String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Post {
    id          String @id @default(cuid())
    title       String @unique
    description String
    category    String
    story       String @default("blog")
    slug        String @unique
    images      String @default("https://images.unsplash.com/photo-1462804993656-fac4ff489837?crop=entropy&cs=srgb&fm=jpg&ixid=Mnw0Mjc3MDB8MHwxfHNlYXJjaHwyfHxwcmV0dHklMjB3b21hbnxlbnwwfDB8fHwxNjc5OTA0NTcx&ixlib=rb-4.0.3&q=85")

    html String? @db.Text
    text String? @db.Text

    author    User      @relation(fields: [authorId], references: [id])
    authorId  String
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    Comment   Comment[]
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    role          Role      @default(USER)
    sessions      Session[]
    posts         Post[]
    Account       Account[]
    News          News[]
    Comment       Comment[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Comment {
    id        String   @id @default(cuid())
    text      String   @db.Text
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    String
    post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
    postId    String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}
